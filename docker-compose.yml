services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: filevault-database
    restart: unless-stopped
    environment:
      POSTGRES_DB: filevault
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: thanush
      POSTGRES_INITDB_ARGS: "--auth-host=md5"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d/
    networks:
      - filevault-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: filevault-backend
    restart: unless-stopped
    environment:
      ENVIRONMENT: development
      PORT: 8080
      DB_HOST: database
      DB_PORT: 5432
      DB_USER: postgres
      DB_PASSWORD: thanush
      DB_NAME: filevault
      DB_SSL_MODE: disable
      JWT_SECRET: your-super-secret-jwt-key-for-development
      STORAGE_PATH: /app/uploads
      ALLOWED_ORIGINS: http://localhost:3000,http://127.0.0.1:3000,https://filevault-frontend-346306300518.us-central1.run.app
      # Rate Limiting Configuration
      ENABLE_RATE_LIMIT: true
      RATE_LIMIT: 2
      RATE_LIMIT_WINDOW: 1
      RATE_LIMIT_BURST: 5
      RATE_LIMIT_MODE: memory
      # Storage Quota Configuration
      ENABLE_QUOTA_CHECK: true
      DEFAULT_USER_QUOTA: 10485760
      ADMIN_QUOTA: 107374182400
      MAX_FILE_SIZE: 104857600
      MAX_DOWNLOAD_SIZE: 1073741824
    ports:
      - "8080:8080"
    volumes:
      - file_uploads:/app/uploads
    depends_on:
      database:
        condition: service_healthy
    networks:
      - filevault-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: filevault-frontend
    restart: unless-stopped
    environment:
      REACT_APP_API_URL: http://localhost:8080
      REACT_APP_GRAPHQL_URL: http://localhost:8080/graphql
      CHOKIDAR_USEPOLLING: true
      NODE_OPTIONS: --max-old-space-size=4096
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - filevault-network
    stdin_open: true
    tty: true

  # Redis for caching (optional/bonus)
  redis:
    image: redis:7-alpine
    container_name: filevault-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - filevault-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Nginx reverse proxy (production)
  nginx:
    image: nginx:alpine
    container_name: filevault-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/nginx.conf
      - ./deployment/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - filevault-network
    profiles:
      - production

  # Prometheus monitoring (bonus)
  prometheus:
    image: prom/prometheus:latest
    container_name: filevault-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - filevault-network
    profiles:
      - monitoring

  # Grafana dashboard (bonus)
  grafana:
    image: grafana/grafana:latest
    container_name: filevault-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./deployment/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - filevault-network
    profiles:
      - monitoring

networks:
  filevault-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  file_uploads:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local